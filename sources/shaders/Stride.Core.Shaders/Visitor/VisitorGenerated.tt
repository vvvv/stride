<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Threading.Tasks" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="$(TargetDir)Microsoft.CodeAnalysis.dll" #>
<#@ assembly name="$(TargetDir)Microsoft.CodeAnalysis.CSharp.dll" #>
<#@ assembly name="$(TargetDir)Microsoft.CodeAnalysis.Workspaces.dll" #>
<#@ assembly name="$(TargetDir)Microsoft.CodeAnalysis.Workspaces.Desktop.dll" #>
<#@ assembly name="$(TargetDir)System.Collections.Immutable.dll" #>

<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp.Syntax" #>
<#@ import namespace="Microsoft.CodeAnalysis.MSBuild" #>

<#@ output extension=".cs" #>

<#
   var path = Path.GetDirectoryName(Host.TemplateFile);

   var msWorkspace = MSBuildWorkspace.Create();
   var project = msWorkspace.OpenProjectAsync(path + "\\..\\Stride.Core.Shaders.csproj").Result;
   var compilation = project.GetCompilationAsync().Result;

   var classVisitor = new NodeClassVisitor();
   classVisitor.Visit(compilation.GlobalNamespace);

    var visitorTypes = classVisitor.Classes; // list of classes in your solution

	var typeAndGenericFormat = new SymbolDisplayFormat(SymbolDisplayGlobalNamespaceStyle.Omitted, SymbolDisplayTypeQualificationStyle.NameOnly, SymbolDisplayGenericsOptions.IncludeTypeParameters);
#>

using Stride.Core.Shaders.Ast;
using Stride.Core.Shaders.Visitor;

namespace Stride.Core.Shaders.Visitor
{
    public partial class ShaderVisitor<TResult>
    {
<# foreach (var type in visitorTypes)
   {
		var typeName = type.ToDisplayString();
       var variableName = type.Name.First().ToString().ToLower() + type.Name.Substring(1);
	   var genericParameters = type.IsGenericType ? $"<{string.Join(",", type.TypeArguments)}>" : string.Empty;
       #>
        public virtual TResult Visit<#=genericParameters#>(<#=typeName#> <#=variableName#>)
        {
            return DefaultVisit(<#=variableName#>);
        }
<# } #>
    }

    public partial class ShaderRewriter
    {
<# foreach (var type in visitorTypes)
   {
		var typeName = type.ToDisplayString();
       var variableName = type.Name.First().ToString().ToLower() + type.Name.Substring(1);
	   var genericParameters = type.IsGenericType ? $"<{string.Join(",", type.TypeArguments)}>" : string.Empty;
       #>
        public override Node Visit<#=genericParameters#>(<#=typeName#> <#=variableName#>)
        {
<# // Process public fields and properties (with getter+setter)
   var ilistName = typeof(IList<>).FullName.Replace("`1", "<>");
   foreach (var member in GetNodeMembers(type)) {
       var memberType = GetSymbolType(member);
       var memberTypeName = memberType.ToDisplayString();
	   var memberVariableName = member.Name.First().ToString().ToLower() + member.Name.Substring(1) + "Temp";
	   var isNodeList = memberType.AllInterfaces.Any(x => x.IsGenericType && x.ConstructUnboundGenericType().ToDisplayString() == ilistName && InheritsFromNode(x.TypeArguments[0]));
	   var isNode = InheritsFromNode(memberType);
	   if (isNode) { #>
            var <#=memberVariableName#> = (<#=memberTypeName#>)VisitDynamic(<#=variableName#>.<#=member.Name#>);
            if (!ReferenceEquals(<#=memberVariableName#>, <#=variableName#>.<#=member.Name#>))
                <#=variableName#>.<#=member.Name#> = <#=memberVariableName#>;
<#     } else if (isNodeList) { #>
            VisitList(<#=variableName#>.<#=member.Name#>);
<#     }
   } #>
            return base.Visit<#=genericParameters#>(<#=variableName#>);
        }
<# } #>
    }

    public partial class ShaderCloner
    {
<# foreach (var type in visitorTypes.Where(x => !x.IsAbstract))
   {
		var typeName = type.ToDisplayString();
       var variableName = type.Name.First().ToString().ToLower() + type.Name.Substring(1);
	   var genericParameters = type.IsGenericType ? $"<{string.Join(",", type.TypeArguments)}>" : string.Empty;
       #>
        public override Node Visit<#=genericParameters#>(<#=typeName#> <#=variableName#>)
        {
            <#=variableName#> = (<#=typeName#>)base.Visit<#=genericParameters#>(<#=variableName#>);
            return new <#=typeName#>
            {
<# foreach (var member in GetNodeMembers(type)) { #>
                <#=member.Name#> = <#=variableName#>.<#=member.Name#>,
<# } #>
            };
        }
<# } #>
    }

    public partial class ShaderVisitor
    {
<# foreach (var type in visitorTypes)
   {
		var typeName = type.ToDisplayString();
       var variableName = type.Name.First().ToString().ToLower() + type.Name.Substring(1);
	   var genericParameters = type.IsGenericType ? $"<{string.Join(",", type.TypeArguments)}>" : string.Empty;
       #>
        public virtual void Visit<#=genericParameters#>(<#=typeName#> <#=variableName#>)
        {
            DefaultVisit(<#=variableName#>);
        }
<# } #>
    }

    public partial class ShaderWalker
    {
<# foreach (var type in visitorTypes)
   {
		var typeName = type.ToDisplayString();
       var variableName = type.Name.First().ToString().ToLower() + type.Name.Substring(1);
	   var genericParameters = type.IsGenericType ? $"<{string.Join(",", type.TypeArguments)}>" : string.Empty;
       #>
        public override void Visit<#=genericParameters#>(<#=typeName#> <#=variableName#>)
        {
<# // Process public fields and properties (with getter+setter)
   var ilistName = typeof(IList<>).FullName.Replace("`1", "<>");
   foreach (var member in GetNodeMembers(type)) {
       var memberType = GetSymbolType(member);
       var memberTypeName = memberType.ToDisplayString();
	   var isNodeList = memberType.AllInterfaces.Any(x => x.IsGenericType && x.ConstructUnboundGenericType().ToDisplayString() == ilistName && InheritsFromNode(x.TypeArguments[0]));
	   var isNode = InheritsFromNode(memberType);
	   if (isNode) { #>
            VisitDynamic(<#=variableName#>.<#=member.Name#>);
<#     } else if (isNodeList) { #>
            VisitList(<#=variableName#>.<#=member.Name#>);
<#     }
   } #>
            base.Visit<#=genericParameters#>(<#=variableName#>);
        }
<# } #>
    }
}

<#
foreach (var type in visitorTypes) { #>
namespace <#=type.ContainingNamespace.ToDisplayString()#>
{
    public partial class <#=type.ToDisplayString(typeAndGenericFormat)#>
    {
        public override void Accept(ShaderVisitor visitor)
        {
            visitor.Visit(this);
        }
        public override TResult Accept<TResult>(ShaderVisitor<TResult> visitor)
        {
            return visitor.Visit(this);
        }
    }
}
<# } #>

<#+

class NodeClassVisitor : SymbolVisitor
{   
    public List<INamedTypeSymbol> Classes = new List<INamedTypeSymbol>();

    public override void VisitNamedType(INamedTypeSymbol symbol)
    {
		if (!InheritsFromNode(symbol.BaseType) || symbol.IsAbstract)
			return;

        Classes.Add(symbol); // save your visited classes
    }

	public override void VisitNamespace(INamespaceSymbol symbol)
    {
		foreach(var childSymbol in symbol.GetMembers())
        {
            //We must implement the visitor pattern ourselves and 
            //accept the child symbols in order to visit their children
            childSymbol.Accept(this);
        }
	}
}

private static bool InheritsFromNode(ITypeSymbol type)
{
	return GetBaseTypesAndThis(type).Any(t => t.ToDisplayString() == "Stride.Core.Shaders.Ast.Node");
}

private static IEnumerable<ITypeSymbol> GetBaseTypesAndThis(ITypeSymbol type)
{
    var current = type;
    while (current != null)
    {
        yield return current;
        current = current.BaseType;
    }
}

private static bool CanVisitMember(ISymbol symbol)
{
    if (symbol.DeclaredAccessibility != Accessibility.Public || symbol.IsStatic)
        return false;

	if (symbol.GetAttributes().Any(x => x.AttributeClass.ToDisplayString() == "Stride.Core.Shaders.Ast.VisitorIgnoreAttribute"))
		return false;

    if (symbol.Kind == SymbolKind.Field)
	{
		var field = (IFieldSymbol)symbol;
		if (field.IsReadOnly)
			return false;

		return true;
	}

	if (symbol.Kind == SymbolKind.Property)
	{
		var property = (IPropertySymbol)symbol;
		if (property.IsReadOnly || property.IsWriteOnly || property.IsIndexer)
			return false;

		if (property.GetMethod.DeclaredAccessibility != Accessibility.Public
		  || property.SetMethod.DeclaredAccessibility != Accessibility.Public)
		  return false;

		return true;
	}

	return false;
}

private static IEnumerable<INamedTypeSymbol> GetNodeTypes(INamedTypeSymbol symbol)
{
	while (symbol != null && InheritsFromNode(symbol))
	{
		yield return symbol;
		symbol = symbol.BaseType;
	}
}

private static IEnumerable<ISymbol> GetNodeMembers(INamedTypeSymbol nodeType)
{
	foreach (var currentNodeType in GetNodeTypes(nodeType).Reverse())
	{
		foreach (var member in currentNodeType.GetMembers().Where(CanVisitMember))
			yield return member;
	}
}

private static ITypeSymbol GetSymbolType(ISymbol symbol)
{
    var localSymbol = symbol as ILocalSymbol;
    if (localSymbol != null)
    {
        return localSymbol.Type;
    }

    var fieldSymbol = symbol as IFieldSymbol;
    if (fieldSymbol != null)
    {
        return fieldSymbol.Type;
    }

    var propertySymbol = symbol as IPropertySymbol;
    if (propertySymbol != null)
    {
        return propertySymbol.Type;
    }

    var parameterSymbol = symbol as IParameterSymbol;
    if (parameterSymbol != null)
    {
        return parameterSymbol.Type;
    }

    var aliasSymbol = symbol as IAliasSymbol;
    if (aliasSymbol != null)
    {
        return aliasSymbol.Target as ITypeSymbol;
    }

    return symbol as ITypeSymbol;
}
#>
