<!-- Global settings used to configure the StrideGraphicsApi -->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" TreatAsLocalProperty="RuntimeIdentifier">

  <!-- Default values -->
  <PropertyGroup>
    <!-- Defaults for CPU and GraphicsApi based on platform-->
    <StrideDefaultGraphicsApi Condition="'$(StridePlatform)' == 'Windows'">Direct3D11</StrideDefaultGraphicsApi>
    <StrideDefaultGraphicsApi Condition="'$(StridePlatform)' == 'UWP'">Direct3D11</StrideDefaultGraphicsApi>
    <StrideDefaultGraphicsApi Condition="'$(StridePlatform)' == 'Android'">OpenGLES</StrideDefaultGraphicsApi>
    <StrideDefaultGraphicsApi Condition="'$(StridePlatform)' == 'iOS'">OpenGLES</StrideDefaultGraphicsApi>
    <StrideDefaultGraphicsApi Condition="'$(StridePlatform)' == 'Linux'">OpenGL</StrideDefaultGraphicsApi>
    <StrideDefaultGraphicsApi Condition="'$(StridePlatform)' == 'macOS'">Vulkan</StrideDefaultGraphicsApi>
    <StrideGraphicsApiOriginal>$(StrideGraphicsApi)</StrideGraphicsApiOriginal>
    <StrideGraphicsApi Condition="'$(StrideGraphicsApi)' == '' and '$(StrideDefaultGraphicsApi)' != ''">$(StrideDefaultGraphicsApi)</StrideGraphicsApi>
    <StrideAssemblyProcessorOptions Condition="'$(StrideAssemblyProcessorOptions)' == ''">$(StrideAssemblyProcessorDefaultOptions)</StrideAssemblyProcessorOptions>
  </PropertyGroup>

  <PropertyGroup>
    <StrideDependenciesDir Condition="'$(StrideDependenciesDir)' != '' and !HasTrailingSlash('$(StrideDependenciesDir)')">$(StrideDependenciesDir)\</StrideDependenciesDir>
    <StrideDependenciesDir Condition="'$(StrideDependenciesDir)' == ''">$(StridePackageStride)\deps\</StrideDependenciesDir>
  </PropertyGroup>

  <!--Import global Stride settings-->
  <Import Project="$(MSBuildThisFileDirectory)..\targets\Stride.Core.GlobalSettings.targets"/>

  <!-- Include platform dependent assembly when specified -->
  <PropertyGroup Condition="'$(StrideGraphicsApiDependent)' == 'true'">
    <!-- Build list of Graphics API for platform that supports multiple -->
    <StrideGraphicsApisWindows Condition="'$(StrideGraphicsApiDependentBuildAll)' == 'true'">Direct3D11;Direct3D12;OpenGL;OpenGLES;Vulkan</StrideGraphicsApisWindows>
    <StrideGraphicsApisWindows Condition="'$(StrideGraphicsApisWindows)' == ''">Direct3D11</StrideGraphicsApisWindows>
    <_StrideGraphicsApisWindows>;$(StrideGraphicsApisWindows);</_StrideGraphicsApisWindows>
    
    <StrideGraphicsApisLinux Condition="'$(StrideGraphicsApiDependentBuildAll)' == 'true'">OpenGL;Vulkan</StrideGraphicsApisLinux>
    <StrideGraphicsApisLinux Condition="'$(StrideGraphicsApisLinux)' == ''">OpenGL</StrideGraphicsApisLinux>
    <_StrideGraphicsApisLinux>;$(StrideGraphicsApisLinux);</_StrideGraphicsApisLinux>


    <!-- Compute list of runtime identifiers based on platforms and graphics platforms -->
    <RuntimeIdentifiers></RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="$(_StridePlatforms.Contains(';Windows;')) And ($(TargetFramework.StartsWith('net4')) Or '$(TargetFramework)' == 'netstandard2.0') And $(_StrideGraphicsApisWindows.Contains(';Direct3D11;'))">$(RuntimeIdentifiers);win</RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="$(_StridePlatforms.Contains(';Windows;')) And ($(TargetFramework.StartsWith('net4')) Or '$(TargetFramework)' == 'netstandard2.0') And $(_StrideGraphicsApisWindows.Contains(';Direct3D12;'))">$(RuntimeIdentifiers);win-d3d12</RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="$(_StridePlatforms.Contains(';Windows;')) And ($(TargetFramework.StartsWith('net4')) Or '$(TargetFramework)' == 'netstandard2.0') And $(_StrideGraphicsApisWindows.Contains(';OpenGL;'))">$(RuntimeIdentifiers);win-opengl</RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="$(_StridePlatforms.Contains(';Windows;')) And ($(TargetFramework.StartsWith('net4')) Or '$(TargetFramework)' == 'netstandard2.0') And $(_StrideGraphicsApisWindows.Contains(';OpenGLES;'))">$(RuntimeIdentifiers);win-opengles</RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="$(_StridePlatforms.Contains(';Windows;')) And ($(TargetFramework.StartsWith('net4')) Or '$(TargetFramework)' == 'netstandard2.0') And $(_StrideGraphicsApisWindows.Contains(';Vulkan;'))">$(RuntimeIdentifiers);win-vulkan</RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="$(_StridePlatforms.Contains(';Linux;')) And '$(TargetFramework)' == 'netstandard2.0' And $(_StrideGraphicsApisLinux.Contains(';OpenGL;'))">$(RuntimeIdentifiers);linux</RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="$(_StridePlatforms.Contains(';Linux;')) And '$(TargetFramework)' == 'netstandard2.0' And $(_StrideGraphicsApisLinux.Contains(';Vulkan;'))">$(RuntimeIdentifiers);linux-vulkan</RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="$(_StridePlatforms.Contains(';macOS;')) And '$(TargetFramework)' == 'netstandard2.0'">$(RuntimeIdentifiers);osx</RuntimeIdentifiers>
    
    <RuntimeIdentifiers>$([MSBuild]::Unescape($(RuntimeIdentifiers.Trim(';'))))</RuntimeIdentifiers>
    <!-- Default fallbacks -->
    <RuntimeIdentifiers Condition="'$(TargetFramework)' == 'netstandard2.0' And '$(StridePlatform)' == 'Linux' And '$(RuntimeIdentifiers)' == ''">linux</RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="'$(TargetFramework)' == 'netstandard2.0' And '$(StridePlatform)' == 'Windows' And '$(RuntimeIdentifiers)' == ''">win</RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="'$(TargetFramework)' == 'netstandard2.0' And '$(StridePlatform)' == 'macOS' And '$(RuntimeIdentifiers)' == ''">osx</RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="'$(TargetFramework)' != 'netstandard2.0' And '$(RuntimeIdentifiers)' == ''">any</RuntimeIdentifiers>
    <RuntimeIdentifierDefault Condition="'$(RuntimeIdentifiers)' != ''">$(RuntimeIdentifiers.Split(';')[0])</RuntimeIdentifierDefault>

    <ExtrasBuildEachRuntimeIdentifier Condition="'$(RuntimeIdentifiers)' != ''">true</ExtrasBuildEachRuntimeIdentifier>
    
    <!-- Compute RuntimeIdentifier (it might be different if passed from a ProjectReference) -->
    <RuntimeIdentifier Condition="'$(RuntimeIdentifier)' == '' And '$(RuntimeIdentifierDefault)' != ''">$(RuntimeIdentifierDefault)</RuntimeIdentifier>
    <!-- Properly setup RuntimeIdentifier if it was not a Graphics-API-specific one -->
    <RuntimeIdentifier Condition="'$(StridePlatform)' == 'Windows' And '$(RuntimeIdentifier)' != 'win' And '$(RuntimeIdentifier)' != 'win-d3d12' And '$(RuntimeIdentifier)' != 'win-opengl' And '$(RuntimeIdentifier)' != 'win-opengles' And '$(RuntimeIdentifier)' != 'win-vulkan'">$(RuntimeIdentifierDefault)</RuntimeIdentifier>
    <RuntimeIdentifier Condition="'$(StridePlatform)' == 'Linux' And '$(RuntimeIdentifier)' != 'linux' And '$(RuntimeIdentifier)' != 'linux-vulkan'">$(RuntimeIdentifierDefault)</RuntimeIdentifier>
    <RuntimeIdentifier Condition="'$(StridePlatform)' == 'macOS' And '$(RuntimeIdentifier)' != 'osx'">$(RuntimeIdentifierDefault)</RuntimeIdentifier>

    <StrideGraphicsApi Condition="'$(RuntimeIdentifier)' == 'win'">Direct3D11</StrideGraphicsApi>
    <StrideGraphicsApi Condition="'$(RuntimeIdentifier)' == 'win-d3d12'">Direct3D12</StrideGraphicsApi>
    <StrideGraphicsApi Condition="'$(RuntimeIdentifier)' == 'win-opengl'">OpenGL</StrideGraphicsApi>
    <StrideGraphicsApi Condition="'$(RuntimeIdentifier)' == 'win-opengles'">OpenGLES</StrideGraphicsApi>
    <StrideGraphicsApi Condition="'$(RuntimeIdentifier)' == 'win-vulkan'">Vulkan</StrideGraphicsApi>

    <StrideGraphicsApi Condition="'$(RuntimeIdentifier)' == 'linux'">OpenGL</StrideGraphicsApi>
    <StrideGraphicsApi Condition="'$(RuntimeIdentifier)' == 'linux-vulkan'">Vulkan</StrideGraphicsApi>

    <StrideGraphicsApi Condition="'$(RuntimeIdentifier)' == 'osx'">Vulkan</StrideGraphicsApi>
  </PropertyGroup>
  
  <!-- Workaround: Remove RuntimeIdentifier from Solution references (https://github.com/onovotny/MSBuildSdkExtras/issues/139)
                   additionally, also remove it from all references to avoid issues -->
  <Target Name="_StrideRemoveRuntimeIdentifier" AfterTargets="AssignProjectConfiguration">
    <ItemGroup>
      <ProjectReferenceWithConfiguration>
        <GlobalPropertiesToRemove>%(ProjectReferenceWithConfiguration.GlobalPropertiesToRemove);RuntimeIdentifier</GlobalPropertiesToRemove>
      </ProjectReferenceWithConfiguration>
    </ItemGroup>
  </Target>
  
  <!-- 
    Settings StrideGraphicsApi specific
  -->
  <PropertyGroup Condition=" '$(StrideGraphicsApi)' == 'Direct3D11' ">
    <StrideGraphicsApiDefines>STRIDE_GRAPHICS_API_DIRECT3D;STRIDE_GRAPHICS_API_DIRECT3D11</StrideGraphicsApiDefines>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(StrideGraphicsApi)' == 'Direct3D12' ">
    <StrideGraphicsApiDefines>STRIDE_GRAPHICS_API_DIRECT3D;STRIDE_GRAPHICS_API_DIRECT3D12</StrideGraphicsApiDefines>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(StrideGraphicsApi)' == 'Null' ">
    <StrideGraphicsApiDefines>STRIDE_GRAPHICS_API_NULL</StrideGraphicsApiDefines>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(StrideGraphicsApi)' == 'OpenGL' ">
    <StrideGraphicsApiDefines>STRIDE_GRAPHICS_API_OPENGL;STRIDE_GRAPHICS_API_OPENGLCORE</StrideGraphicsApiDefines>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(StrideGraphicsApi)' == 'OpenGLES' ">
    <StrideGraphicsApiDefines>STRIDE_GRAPHICS_API_OPENGL;STRIDE_GRAPHICS_API_OPENGLES</StrideGraphicsApiDefines>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(StrideGraphicsApi)' == 'Vulkan' ">
    <StrideGraphicsApiDefines>STRIDE_GRAPHICS_API_VULKAN</StrideGraphicsApiDefines>
  </PropertyGroup>
  
  <!-- 
    Settings StridePlatform specific
  -->
  <PropertyGroup Condition=" '$(StridePlatform)' == 'Windows' ">
    <StrideGraphicsApiDefines>FRAMEWORK_SHADER_USE_SHARPDX;$(StrideGraphicsApiDefines)</StrideGraphicsApiDefines>
    <FrameworkShaderUseSharpDX>true</FrameworkShaderUseSharpDX>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(StridePlatform)' == 'UWP' ">
    <AutoIncludeSystemAssembly>true</AutoIncludeSystemAssembly>
    <ProjectLockFile Condition="'$(ProjectLockFile)' == ''">$(MSBuildThisFileDirectory)..\build\project.lock.json</ProjectLockFile>
  </PropertyGroup>

  <PropertyGroup Condition="('$(StridePlatform)' == 'Linux') or ('$(StridePlatform)' == 'macOS')">
    <FrameworkShaderUseSharpDX>false</FrameworkShaderUseSharpDX>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(StridePlatform)' == 'Android' ">
    <StrideExternalSuffix>.Android</StrideExternalSuffix>
    <FrameworkShaderUseSharpDX>false</FrameworkShaderUseSharpDX>
  </PropertyGroup>
  
  <PropertyGroup Condition=" '$(StridePlatform)' == 'iOS' ">
    <StrideExternalSuffix>.iOS</StrideExternalSuffix>
    <FrameworkShaderUseSharpDX>false</FrameworkShaderUseSharpDX>
    <NUnitLiteBinDir>$(StrideDependenciesDir)NUnitLite\net-monotouch\</NUnitLiteBinDir>
  </PropertyGroup>

  <!-- 
    Global Defines
  -->
  <PropertyGroup>
    <StrideGraphicsApiDefines>$(StrideGraphicsApiDefines);STRIDE_EFFECT_COMPILER</StrideGraphicsApiDefines>
    <StrideEffectCompiler>true</StrideEffectCompiler>
  </PropertyGroup>

  <PropertyGroup>
    <DefineConstants>$(DefineConstants);$(StrideGraphicsApiDefines)</DefineConstants>
  </PropertyGroup>
  
  <PropertyGroup>
    <StrideUI Condition="'$(StridePlatform)' == 'Windows' Or '$(StridePlatform)' == 'Linux' Or '$(StridePlatform)' == 'macOS'">SDL</StrideUI>
    <StrideUI Condition="'$(StrideGraphicsApi)' == 'OpenGL'">$(StrideUI);OPENTK</StrideUI>
    <StrideUI Condition="'$(StridePlatform)' == 'Windows' AND ($(TargetFramework.StartsWith('net4')) OR $(TargetFramework.StartsWith('netcoreapp3'))) AND ('$(StrideGraphicsApi)' == 'Direct3D11' Or '$(StrideGraphicsApi)' == 'Direct3D12')">$(StrideUI);WINFORMS;WPF</StrideUI>

    <DefineConstants Condition="$(StrideUI.Contains('SDL'))">$(DefineConstants);STRIDE_UI_SDL</DefineConstants>
    <DefineConstants Condition="$(StrideUI.Contains('OPENTK'))">$(DefineConstants);STRIDE_UI_OPENTK</DefineConstants>
    <DefineConstants Condition="$(StrideUI.Contains('WINFORMS'))">$(DefineConstants);STRIDE_UI_WINFORMS</DefineConstants>
    <DefineConstants Condition="$(StrideUI.Contains('WPF'))">$(DefineConstants);STRIDE_UI_WPF</DefineConstants>
  </PropertyGroup>
  <!-- Build the StrideUIList using the value of StrideUI -->
  <ItemGroup Condition="'$(StrideUIList)' == ''">
    <StrideUIList Condition="'$(StrideUI)' != ''" Include="$(StrideUI)" />
    <StrideUIList Condition="'$(StrideUI)' == ''" Include="None" />
  </ItemGroup>

  
  <!--Building Stride SDK itself?-->
  <PropertyGroup Condition=" '$(StrideUserBuild)' != 'true' ">
    <!--Output All files in solution\Bin directory-->
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <!-- Pack target -->
  <!--<UsingTask TaskName="Stride.Core.Tasks.PackAssets" AssemblyFile="$(MSBuildThisFileDirectory)..\core\Stride.Core.Tasks\bin\$(Configuration)\$(StrideEditorTargetFramework)\Stride.Core.Tasks.exe" />-->
  <Target Name="PrepareStrideAssetsForPack" BeforeTargets="_GetPackageFiles" Condition="'$(StridePackAssets)' == 'true'">
    <!-- We use exec version rather than task version, otherwise file will be locked during rebuild -->
    <!--<PackAssets ProjectFile="$(MSBuildProjectFile)" IntermediatePackagePath="$(IntermediateOutputPath)\stride">
      <Output TaskParameter="GeneratedItems" ItemName="None"/>
    </PackAssets>-->
    <Exec Command="&quot;$(MSBuildThisFileDirectory)..\core\Stride.Core.Tasks\bin\$(Configuration)\$(StrideEditorTargetFramework)\Stride.Core.Tasks.exe&quot; pack-assets &quot;$(MSBuildProjectFile)&quot; &quot;$(IntermediateOutputPath)\stride&quot;" ConsoleToMsBuild="true">
      <Output TaskParameter="ConsoleOutput" ItemName="PackAssetsLine" />
    </Exec>
    <ItemGroup>
      <PackAssetsLine Update="@(PackAssetsLine)">
        <SourcePath>$([System.String]::new('%(Identity)').Split('|')[0])</SourcePath>
        <PackagePath>$([System.String]::new('%(Identity)').Split('|')[1])</PackagePath>
      </PackAssetsLine>
      <None Include="%(PackAssetsLine.SourcePath)">
        <Pack>true</Pack>
        <PackagePath>%(PackAssetsLine.PackagePath)</PackagePath>
      </None>
    </ItemGroup>
  </Target>
</Project>
